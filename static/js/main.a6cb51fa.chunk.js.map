{"version":3,"sources":["components/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["colors","require","Container","props","componentDidMount","fetchData","fetch","then","response","json","parsedJSON","setState","randomQuoteStr","quote","href","catch","error","console","log","ChangeColorFunction","ColorCode","Math","floor","random","document","body","style","color","state","authorNameStr","className","id","this","onLoadStart","bind","onClick","onMouseUp","src","alt","target","class","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+7EAGMA,G,MAASC,EAAQ,KAgGRC,E,kDA7Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,kBAAoB,WAClB,EAAKC,aAVY,EAanBA,UAAY,WACVC,MAAM,2BACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZC,eAAgBF,EAAWG,MAC3BC,KAAMJ,EAAWG,WAGpBE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,QAASF,OAtBxB,EAyBnBG,oBAAsB,WACpB,IAAMC,EAAS,UAAMpB,EAAOA,OAAOqB,KAAKC,MAAsB,IAAhBD,KAAKE,WAApC,MACfC,SAASC,KAAKC,MAAMC,MAAQP,EAG5B,EAAKT,SAAS,CACZgB,MAAOP,KA7BT,EAAKQ,MAAQ,CACXC,cAAe,aACfF,MAAO,EAAKR,sBACZP,eAAgB,IALD,E,qDAoCjB,OACE,yBAAKkB,UAAU,YAAYC,GAAG,aAC5B,wBACEA,GAAG,OACHL,MAAO,CAAEC,MAAOK,KAAKJ,MAAMD,OAC3BM,YAAaD,KAAK3B,UAAU6B,KAAKF,OAEhCA,KAAKJ,MAAMhB,gBAEd,wBAAImB,GAAG,SAASL,MAAO,CAAEC,MAAOK,KAAKJ,MAAMD,QACxCK,KAAKJ,MAAMC,eAEd,6BACA,4BACEC,UAAU,SACVC,GAAG,YACHI,QAASH,KAAK3B,UAAU6B,KAAKF,MAC7BI,UAAWJ,KAAKb,oBAAoBe,KAAKF,OAJ3C,aAQA,uBACEF,UAAU,uBACVC,GAAG,cACHjB,KAAI,uDACFkB,KAAKJ,MAAMhB,eADT,eAEQoB,KAAKJ,MAAMC,cAFnB,yBAIJ,yBACEE,GAAG,cACHM,IAAI,iIACJC,IAAI,uBAGR,gCACE,0CACiB,IACf,uBAAGxB,KAAK,mCAAmCyB,OAAO,SAClDb,MAAO,CAAEC,MAAOK,KAAKJ,MAAMD,QACzB,0BAAMa,MAAM,QAAZ,KAFF,iBAGE,0BAAMA,MAAM,QAAZ,QAGJ,kCACO,IACL,uBAAG1B,KAAK,sBAAsByB,OAAO,SACrCb,MAAO,CAAEC,MAAOK,KAAKJ,MAAMD,QACzB,0BAAMa,MAAM,QAAZ,KAFF,cAGE,0BAAMA,MAAM,QAAZ,c,GArFUC,IAAMC,WCIfC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0C,c","file":"static/js/main.a6cb51fa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Container.scss\";\n\nconst colors = require(\"./possible-colors.json\");\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authorNameStr: \"Kanye West\",\n      color: this.ChangeColorFunction(),\n      randomQuoteStr: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.fetchData();\n  };\n\n  fetchData = () => {\n    fetch(\"https://api.kanye.rest/\")\n      .then((response) => response.json())\n      .then((parsedJSON) => {\n        this.setState({\n          randomQuoteStr: parsedJSON.quote,\n          href: parsedJSON.quote,\n        });\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  ChangeColorFunction = () => {\n    const ColorCode = `${colors.colors[Math.floor(Math.random() * 215)]}AA`;\n    document.body.style.color = ColorCode;\n\n    // Esto puede hacerse mejor, faltan tests.\n    this.setState({\n      color: ColorCode,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"quote-box\" id=\"quote-box\">\n        <h2\n          id=\"text\"\n          style={{ color: this.state.color }}\n          onLoadStart={this.fetchData.bind(this)}\n        >\n          {this.state.randomQuoteStr}\n        </h2>\n        <h3 id=\"author\" style={{ color: this.state.color }}>\n          {this.state.authorNameStr}\n        </h3>\n        <br />\n        <button\n          className=\"button\"\n          id=\"new-quote\"\n          onClick={this.fetchData.bind(this)}\n          onMouseUp={this.ChangeColorFunction.bind(this)}\n        >\n          New quote\n        </button>\n        <a\n          className=\"twitter-share-button\"\n          id=\"tweet-quote\"\n          href={`${`https://twitter.com/intent/tweet?text=`}\"${\n            this.state.randomQuoteStr\n          }${`\" - `}${this.state.authorNameStr}${`&hashtags=quotemaker`}`}\n        >\n          <img\n            id=\"twitter-img\"\n            src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fimage.flaticon.com%2Ficons%2Fpng%2F512%2F23%2F23931.png&f=1&nofb=1\"\n            alt=\"Tweet this quote!\"\n          />\n        </a>\n        <footer>\n          <p>\n            &copy; Made by{\" \"}\n            <a href=\"https://github.com/juancdominici\" target=\"_blank\"\n            style={{ color: this.state.color }}>\n              <span class=\"code\">&lt;</span> Juan Dominici\n              <span class=\"code\">&#47;&gt;</span>\n            </a>\n          </p>\n          <p>\n            With{\" \"}\n            <a href=\"https://kanye.rest/\" target=\"_blank\"\n            style={{ color: this.state.color }}>\n              <span class=\"code\">&lt;</span> Kanye.Rest\n              <span class=\"code\">&#47;&gt;</span>\n            </a>\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport Container from './components/Container'\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}